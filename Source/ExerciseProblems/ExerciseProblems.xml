<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExerciseProblems</name>
    </assembly>
    <members>
        <member name="T:ExerciseProblems.Exceptions.ArrayInputSizeException">
            <summary>
            This class is the array input size exception.
            </summary>
        </member>
        <member name="M:ExerciseProblems.Exceptions.ArrayInputSizeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExerciseProblems.Exceptions.ArrayInputSizeException"/> class.
            </summary>
            <param name="message">The message to render on the screen.</param>
        </member>
        <member name="M:ExerciseProblems.Exceptions.ArrayInputSizeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ExerciseProblems.Exceptions.ArrayInputSizeException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="streamingContext">The current streaming context.</param>
        </member>
        <member name="T:ExerciseProblems.Exceptions.LeftRotationQuantityException">
            <summary>
            This class is the array quantity exception class.
            </summary>
        </member>
        <member name="M:ExerciseProblems.Exceptions.LeftRotationQuantityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExerciseProblems.Exceptions.LeftRotationQuantityException"/> class.
            </summary>
            <param name="message">The message to render on the screen.</param>
        </member>
        <member name="M:ExerciseProblems.Exceptions.LeftRotationQuantityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ExerciseProblems.Exceptions.LeftRotationQuantityException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The current streaming context.</param>
        </member>
        <member name="T:ExerciseProblems.Exceptions.MatrixMultiplicationException">
            <summary>
            This exception class will be able to throw the right exceptions in the matrix multiplications.
            </summary>
        </member>
        <member name="M:ExerciseProblems.Exceptions.MatrixMultiplicationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExerciseProblems.Exceptions.MatrixMultiplicationException"/> class.
            </summary>
            <param name="message">The message to render on the screen.</param>
        </member>
        <member name="M:ExerciseProblems.Exceptions.MatrixMultiplicationException.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ExerciseProblems.Exceptions.MatrixMultiplicationException"/> class.
            </summary>
            <param name="message">The message to render on the screen.</param>
            <param name="variableMissing">The parameter that is missing.</param>
        </member>
        <member name="M:ExerciseProblems.Exceptions.MatrixMultiplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ExerciseProblems.Exceptions.MatrixMultiplicationException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="streamingContext">The current streaming context.</param>
        </member>
        <member name="T:ExerciseProblems.ProblemSolver">
            <summary>
            This is the problem solver class.
            </summary>
        </member>
        <member name="M:ExerciseProblems.ProblemSolver.AbsoluteDifference">
            <summary>
            This method will calculate the absolute difference.
            </summary>
        </member>
        <member name="M:ExerciseProblems.ProblemSolver.ArrayLeftRotation">
            <summary>
            This method conducts the array left rotation.
            </summary>
        </member>
        <member name="M:ExerciseProblems.ProblemSolver.NumbersWithEvenNumberDigits">
            <summary>
            This method will find the number of even-numbered digits.
            </summary>
        </member>
        <member name="M:ExerciseProblems.ProblemSolver.CreateAcronym">
            <summary>
            This method will be able to solve the problem of creating an acronym.
            </summary>
        </member>
        <member name="M:ExerciseProblems.ProblemSolver.AlternatingSums">
            <summary>
            This method will be solving the problem of finding alternating sums.
            </summary>
        </member>
        <member name="M:ExerciseProblems.ProblemSolver.ArrayElementsMultiplication">
            <summary>
            This method will take two arrays and multiply the elements that are in both arrays.
            </summary>
        </member>
        <member name="M:ExerciseProblems.ProblemSolver.AvoidObstacles">
            <summary>
            This method will solve the avoid obstacles problem.
            </summary>
        </member>
        <member name="M:ExerciseProblems.ProblemSolver.KnapsackLight">
            <summary>
            This method will address the solution to the knapsack ligt problem.
            </summary>
        </member>
        <member name="T:ExerciseProblems.Program">
            <summary>
            This is the main driver class of this application.
            </summary>
        </member>
        <member name="M:ExerciseProblems.Program.Main">
            <summary>
            This is the main entry point of execution.
            </summary>
        </member>
        <member name="T:ExerciseProblems.Solver">
            <summary>
            This is the class that will do the heavy-lifting of solving all problems.
            </summary>
        </member>
        <member name="M:ExerciseProblems.Solver.FindDifference(System.Int32)">
            <summary>
            This method will calculate the absolute difference between the input number, n
            and 51. If the value of n is greater than 51, return triple the absolute difference.
            </summary>
            <param name="n">The input integer, provided from the console.</param>
            <returns>The absolute difference which is an integer.</returns>
        </member>
        <member name="M:ExerciseProblems.Solver.LeftRotateArray(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            <summary>
            This method will return an integer array that is left rotated.
            </summary>
            <param name="input">The array that is blank, and going to be the output of left rotation.</param>
            <param name="a">The array that is coming in as input from the user.</param>
            <param name="k">The number of rotations to be conducted.</param>
            <param name="n">The size of the input array.</param>
            <returns>An integer array that is the result of the left rotations.</returns>
        </member>
        <member name="M:ExerciseProblems.Solver.FindNumbersWithEvenNumberDigits(System.Int32[])">
            <summary>
            This method will find the number of elements in the array where the number itself
            has an even number of digits.
            </summary>
            <param name="input">The input array.</param>
            <returns>A total count of even-numbered integers.</returns>
        </member>
        <member name="M:ExerciseProblems.Solver.MakeAcronym(System.String)">
            <summary>
            This method be able to take the input string and create an acronym.
            </summary>
            <param name="input">The input string.</param>
            <returns>A compressed version - or the acronym.</returns>
        </member>
        <member name="M:ExerciseProblems.Solver.FindAlternatingSums(System.Int32[])">
            <summary>
            This method will allow for finding the alternating sums.
            </summary>
            <param name="input">The array of integers coming in from the command line.</param>
            <returns>An array of integers of alternating sums.</returns>
        </member>
        <member name="M:ExerciseProblems.Solver.MultiplyArrayElements(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            This method will make sure to calculate the product of the elements in both arrays.
            </summary>
            <param name="first">The first array.</param>
            <param name="second">The second array.</param>
            <param name="arrayLength">The length of the array.</param>
            <returns>An integer array that represents the necessary result.</returns>
        </member>
        <member name="M:ExerciseProblems.Solver.AvoidObstacles(System.Int32[])">
            <summary>
            This method will be calculating the obstacles to avoid.
            </summary>
            <param name="inputArray">The input array, consisting of the obstacles.</param>
            <returns>The minimum length of the jump in order to avoid all obstacles.</returns>
        </member>
        <member name="M:ExerciseProblems.Solver.KnapsackLight(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method will solve the knapsack light problem.
            </summary>
            <param name="value1">The first value.</param>
            <param name="weight1">The first weight.</param>
            <param name="value2">The second value.</param>
            <param name="weight2">The second weight.</param>
            <param name="maxWeight">The maximum weight of the knapsack.</param>
            <returns>An integer of the knapsack weight that is to be carried.</returns>
        </member>
        <member name="M:ExerciseProblems.Solver.ExtraNumber(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method will select the extra number.
            </summary>
            <param name="a">The first of three integers.</param>
            <param name="b">The second of three integers.</param>
            <param name="c">The third of three integers.</param>
            <returns>The extra number that has been selected.</returns>
        </member>
    </members>
</doc>
